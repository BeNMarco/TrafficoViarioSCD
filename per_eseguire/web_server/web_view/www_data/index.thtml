<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Mappa città</title>
<link rel="stylesheet" href="css/style.css">
<link rel="stylesheet" href="css/bootstrap.min.css">
<link rel="stylesheet" href="css/bootstrap-theme.min.css">

<script type="text/javascript" src="js/worldMap.js"></script>
<script type="text/javascript" src="js/worldSimulation.js"></script>
<script type="text/javascript" src="js/entities.js"></script>
<script type="text/javascript" src="js/traiettorie.js"></script>
<script type="text/javascript" src="js/utils.js"></script>
	<script type="text/javascript" src="js/utils/JSChain.js"></script>
<script type="text/javascript" src="js/utils/paper-full.js"></script>
<script type="text/javascript" src="js/utils/jquery.min.js"></script>
<script type="text/javascript" src="js/utils/bootstrap.min.js"></script>
<script type="text/javascript" src="js/utils/jquery.mousewheel.min.js"></script>
<script type="text/javascript">
	window.onerror = function(msg, url, line, col, error) {
		// Note that col & error are new to the HTML 5 spec and may not be 
		// supported in every browser.  It worked for me in Chrome.
		var extra = !col ? '' : '\ncolumn: ' + col;
		extra += !error ? '' : '\nerror: ' + error;

		// You can view the information in an alert to see things working like this:
		console.log("Error: " + msg + "\nurl: " + url + "\nline: " + line + extra);
		alert("Error: " + msg + "\nurl: " + url + "\nline: " + line + extra);
		console.log(error);
		console.log(error.stack);

		// TODO: Report this error via ajax so you can keep track
		//       of what pages have JS issues

		var suppressErrorAlert = true;
		// If you return true, then error alerts (like in older versions of 
		// Internet Explorer) will be suppressed.
		return suppressErrorAlert;
	};
  var server = window.location.host;

  var worldStyle = new WorldMapStyle();
  var world = new WorldMap();

  var entities = new EntitiesRegistry();
  entities.setStyle(new WorldEntitiesStyle());

  var bufferSize = 10;
  
  var enableSimulation = true;
  var simulationRunning = false;
  var terminated = false;

  var updatesURI = "mainpageUpdates";
  var server = window.location.host;

  var target = "ws://" + server
      + "/" + updatesURI;

  var sim = new WorldSimulation(entities, bufferSize, 1000);

  paper.install(window);

  entities.onCarsChange = function(cars){
    $('#car-num').text(Object.keys(cars).length);
  }

  entities.onBusesChange = function(buses){
    $('#buses-num').text(Object.keys(buses).length);
  }

  entities.onBikesChange = function(bikes){
    $('#bike-num').text(Object.keys(bikes).length);
  }

  entities.onPedestriansChange = function(ped){
    $('#ped-num').text(Object.keys(ped).length);
  }

  var ws1 = new WebSocket(target);

  ws1.onopen = function(event) {
    //ws1.send("ciao server");
    console.log(event);
  }

  ws1.onmessage = function(event) {
    //console.log(event);
    //console.log(event.data);
    //console.log(JSON.parse(event.data));
    var msg = JSON.parse(event.data);
    if(msg.type == 'update' && msg.quartiere){
      var mapURI = "http://"+server+"/quartiere"+msg.quartiere+"/map.json"
      jQuery.getJSON("quartiere"+msg.quartiere+"/map.json", prepareDistrict);
    } 
    else if (msg.type == "command"){
      if(msg.command == "terminated"){
        terminated = true;
        ws1.close();
        sim.stop();
        view.onFrame = null;
        closeLoadingDialog();
        openMessageDialog("Simulazione terminata.<br />Ora è possibile chiudere il browser.");
      }
      if(msg.command == "termination_requested"){
        openLoadingDialog();
        setProgressText("Terminazione richiesta.<br />In attesa del segnale di terminazione da parte del sistema.", 100);
      } 
    }
  }

  ws1.onerror = function(event) {
    if(!terminated){
      sim.stop();
      view.onFrame = null;
      closeLoadingDialog();
      openMessageDialog("Errore nella connessione.<br />"+event);
    } 
  }

  ws1.onclose = function(event){
    if(!terminated){
      sim.stop();
      view.onFrame = null;
      closeLoadingDialog();
      openMessageDialog("Disconnesso dal server.<br />Il server non è più raggiungibile, provare a ricaricare la pagina.");
    } 
  }

  function prepareDistrict(data){
    var map = world.addMapPiece(data);
    map.setTraiettorie(traiettorie);
    $('#statusDistrict'+map.id+' .district-status-bar').attr("class", "district-status-bar progress-bar progress-bar-info active"); 
    $('#statusDistrict'+map.id+' .district-status-bar').html('<i class="rendering-state-icon glyphicon glyphicon-flash"> </i> Attivo'); 
// fa fa-medkit
// glyphicon glyphicon-flash
    map.onMapMouseEnter = function(event){
      this.prevCursor = $('#canvas').css('cursor');
      $('#canvas').css('cursor', 'pointer');
    }
    map.onMapMouseLeave = function(event){
      $('#canvas').css('cursor', this.prevCursor); 
    }
    map.onMapMouseUp = function(event){
      $('#canvas').css('cursor', 'pointer');
    }
    map.onPieceReady = setupPieceSimulation;

    map.load(data);
    map.draw(worldStyle);
    world.liftPiecesBorders();
    fitMap();
  }

  function setBufferingState(id){
    //var id = this.map.id;
    $('#statusDistrict'+id+' .district-status-bar').attr("class", "district-status-bar progress-bar progress-bar-striped active"); 
    $('#statusDistrict'+id+' .district-status-bar').html('<i id="rendering-state-icon" class="glyphicon glyphicon-refresh"> </i> Buffering');
  }

  function setRunningState(id){
    //var id = this.map.id;
    $('#statusDistrict'+id+' .district-status-bar').attr("class", "district-status-bar progress-bar progress-bar-striped progress-bar-success active"); 
    $('#statusDistrict'+id+' .district-status-bar').html('<i id="rendering-state-icon" class="glyphicon glyphicon-play"> </i> Running');
  }

  function setStoppedState(id){
    //var id = this.map.id;
    $('#statusDistrict'+id+' .district-status-bar').attr("class", "district-status-bar progress-bar progress-bar-danger"); 
    $('#statusDistrict'+id+' .district-status-bar').html('<i id="rendering-state-icon" class="glyphicon glyphicon-stop"> </i> Fermo');
  }

  function setDisconnectedState(id){
    $('#statusDistrict'+id+' .district-status-bar').attr("class", "district-status-bar progress-bar progress-bar-danger"); 
    $('#statusDistrict'+id+' .district-status-bar').html('<i id="rendering-state-icon" class="glyphicon glyphicon-exclamation-sign"> </i> Disconnesso');
  }

  function cacheStatusUpdate(id, nInCache){
    //var id = this.map.id;
    var perc = (nInCache / bufferSize);
    perc = perc > 1.0 ? 1.0 : perc;
    var barSelector = '#statusDistrict'+id+' .rendering-cache-bar';
    $(barSelector).html(nInCache);
    $(barSelector).css('width', (perc*100)+'%').attr('aria-valuenow', (perc*100)); 

    var barStyle = "progress-bar-default";
    if(perc < 0.33){
      barStyle = "progress-bar-danger";
    } else if (perc < 1){
      barStyle = "progress-bar-warning";
    }
    $(barSelector).attr("class", "rendering-cache-bar progress-bar active "+barStyle); 
  }

  function setupPieceSimulation(){
    var pSim = sim.addPiece(this);

    pSim.onEmptyCache = setBufferingState;
    pSim.onStatesAvailable = setRunningState;
    pSim.onStateReceived = cacheStatusUpdate;
    pSim.onStateConsumed = cacheStatusUpdate;
    pSim.onSimulationStopped = setStoppedState;
    
    pSim.onReady = function(){
      console.log("The simulation is ready");
      this.init();
      sim.running = true;
    }

    var target = "ws://" + server
        + "/quartiere"+this.id+"/updatesStream"
    pSim.prepareSocket(target);

    if(enableSimulation && !simulationRunning){
      console.log("registering renderer");
      view.onFrame = function(event) {
        sim.updateState(event.delta * 1000);
      }
      simulationRunning = true;
    }

    pSim.socket.onclose = function(){
      setDisconnectedState(pSim.map.id);
    }
  }

  window.onfocus = function()
  {
    if(sim != null && sim.running){
      console.log("adding renderer");
      sim.fastForward();
      view.onFrame = function(event) {
        // use this trick to throw away the first delta that is usually huge
        view.onFrame = function(event){
          sim.updateState(event.delta * 1000);
        }
      }
    }
  }

  window.onblur = function()
  {
    console.log("removing renderer");
    view.onFrame = null;
  }

	function startSimulation() {
		console.log("start simulation");
		//world.bringTrafficLightsToFront();
		
	}

	
	function traslladar(a, b) {
		var center = paper.project.view.center;
		var desX = (a.x - b.x);
		var desY = (a.y - b.y);

		var newCenter = [ center.x + desX, center.y + desY ];
		return newCenter;
	}

	function zoomIn() {
		view.zoom = view.zoom * 1.1;
	}

	function zoomOut() {
		view.zoom = view.zoom / 1.1;
	}

  function fitMap(){
    if(project.activeLayer.children.length > 0){
      var g = project.activeLayer;
      var xP = view.size.width / g.bounds.width;
      var yP = view.size.height / g.bounds.height;
      var z = xP;
      if(Math.abs(yP) < Math.abs(xP))
        z = yP;
      view.zoom = view.zoom * z;
      view.center = project.activeLayer.position;
    }
  }

	function openLoadingDialog() {
		console.log("openLoadingDialog fired");
		$('#loadingMessage').html(
				"Prego attendere!<br />Caricamento e rendering della mappa in corso");
		$('#loadingDialog').modal('show');
		//$('#outputData').text("Started loading and drawing");
	}

	function closeLoadingDialog() {
		$('#loadingDialog').modal('hide');
	}

	function openMessageDialog(text) {
		$('#messageDialogText').html(text);
		$('#messageDialog').modal('show');
	}

	function closeMessageDialog() {
		$('#messageDialog').modal('hide');
	}

	function requestTermination()
	{
		console.log("request Termination");
		view.onFrame = null;
		if(ws1)
		{
			var data = {type:"command", command:"terminate"};
			var text = JSON.stringify(data);
			ws1.send(text);
		}
	}

	function setProgressText(text) {
		$('#loadingMessage').html(text);
	}
  
	function setProgressText(text, value) {
		$('#loadingMessage').html(text);
		$('#loadingDialog .progress-bar').css('width', value+'%').attr('aria-valuenow', value); 
	}


	onload = function(e) {

		$('#loadingDialog').modal({
			backdrop : 'static',
			keyboard : false,
			show : false,
		});

		$('#dataDialog').modal({
			show : false,
		});

    $('#status-box').hide();

		$(function () {
			$('[data-toggle="tooltip"]').tooltip()
		})

		paper.setup(document.getElementById("canvas"));

		var myTool = new Tool();
		myTool.onMouseDown = function(event) {
			path = new Point();
			path.add(event.point);
			$("#canvas").css('cursor', '-webkit-grabbing');

		};

		myTool.onMouseDrag = function(event) {
			path.add(event.point);

			var des = traslladar(event.downPoint, event.point);
			paper.project.view.center = des;

		}

		myTool.onMouseUp = function(event) {
			$("#canvas").css('cursor', '-webkit-grab');
			$("#canvas").css('cursor', '-moz-grab');
		}

		$('#canvas').mousewheel(function(event) {
			event.deltaY > 0 ? zoomIn() : zoomOut();
		});

    
	}
</script>

</head>
<body>

	<div id="canvas-wrap">


		<div class="modal fade" id="dataDialog" tabindex="-1" role="dialog" aria-labelledby="myDataDialogLabel" aria-hidden="true">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<button type="button" class="close" data-dismiss="modal">
							<span aria-hidden="true">&times;</span><span class="sr-only">Close</span>
						</button>
						<h4 class="modal-title" id="myDataDialogLabel">Json Data</h4>
					</div>
					<div class="modal-body">
						<pre id="jsonDataArea" style="overflow: auto; max-height: 500px;"></pre>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-primary" onClick="selectText('jsonDataArea')">Select all</button>
					</div>
				</div>
			</div>
		</div>

		<div class="modal" id="loadingDialog" tabindex="-1" role="dialog" aria-labelledby="myLoadingDialogLabel" aria-hidden="true">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h4 class="modal-title" id="myLoadingDialogLabel">Caricamento in corso...</h4>
					</div>
					<div class="modal-body">
						<p id="loadingMessage"></p>
						<div class="progress">
							<div class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%">
								<span class="sr-only">Caricamento</span>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		<div class="modal" id="messageDialog" tabindex="-1" role="dialog" aria-labelledby="myMessageDialogLabel" aria-hidden="true">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h4 class="modal-title" id="myMessageDialogLabel">Info</h4>
					</div>
					<div class="modal-body">
						<p id="messageDialogText"></p>
					</div>
				</div>
			</div>
		</div>

		
		<canvas id="canvas" resize hidpi="off"
   style="background-color: #F0EDE5;"></canvas>

   <div id="title-div">
     <h1>Mappa città</h1>
   </div>

   <div id="controls-div">
    <div class="btn-group-vertical" role="group" aria-label="...">
      <button type="button" class="btn btn-default glyphicon glyphicon-zoom-in" onClick="zoomIn()"  data-toggle="tooltip" data-placement="right" title="Zoom Im"></button>
      <button type="button" class="btn btn-default glyphicon glyphicon-zoom-out" onClick="zoomOut()"  data-toggle="tooltip" data-placement="right" title="Zoom out"></button>
    </div>
    <div class="divisor-small"></div>
    <div>
      <button id="fitMapButton" type="button" class="btn btn-default glyphicon glyphicon-fullscreen" data-toggle="tooltip" data-placement="right" title="Centra e ridimensiona" onClick="fitMap()"></button>
    </div>
    <div class="divisor"></div>
    <div>
     <button type="button" class="btn btn-danger glyphicon glyphicon-stop" onClick="requestTermination()"  data-toggle="tooltip" data-placement="right" title="Richiedi terminazione"></button>
   </div>
 </div>

 <div id="info-box">
   <p id="info-title" class="box-title"><strong>Infos</strong></p>
   <div class="propsBlock-run">
    <div class="labels">
      <p>Macchine:</p>
      <p>Autobus:</p>
      <p>Bici:</p>
      <p>Pedoni:</p>
    </div>
    <div class="values">
      <p id="car-num">0</p>
      <p id="buses-num">0</p>
      <p id="bike-num">0</p>
      <p id="ped-num">0</p>
    </div>
  </div>
</div>

<div id="rendering-state-box">
  <p id="info-title" class="box-title"><strong>Stato quartieri</strong></p>

  <table class="table" id="districts-status">
    <thead>
      <tr>
        <th>Id</th>
        <th>Stato</th>
        <th>Cache</th>
      </tr>
    </thead>
    <tbody>
      @@TABLE@@
      <tr id="statusDistrict@_DISTRICT_ID_@" class="district-status">
        <td>@_DISTRICT_ID_@</td>
        <td>
          <div class="progress" style="width:100px;">
            <div class="district-status-bar progress-bar progress-bar-inactive" role="progressbar" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100" style="width: 100%">
              <i class="rendering-state-icon glyphicon glyphicon-minus-sign"> </i> Non attivo
            </div>
          </div>
        </td>
        <td>
          <div class="progress" style="width:100px;">
          <div class="rendering-cache-bar progress-bar progress-bar-danger" role="progressbar" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100" style="width: 10%; min-width:10%;">
              0
            </div>
          </div>
        </td>
      </tr>
      @@END_TABLE@@
    </tbody>
  </table>
</div>

</div>
</body>
</html>
