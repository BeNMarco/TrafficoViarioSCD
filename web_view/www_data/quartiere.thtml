<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Mappa quartiere @_ID_QUARTIERE_@</title>
<link rel="stylesheet" href="css/style.css">
<!--
	<link rel="stylesheet" href="js/utils/jquery-ui.theme.min.css">
	<link rel="stylesheet" href="js/themes/smoothness/jquery-ui.min.css">
	<link rel="stylesheet" href="js/themes/smoothness/jquery.ui.theme.css">
	-->
<link rel="stylesheet" href="css/bootstrap.min.css">
<link rel="stylesheet" href="css/bootstrap-theme.min.css">

<script type="text/javascript" src="js/map.js"></script>
<script type="text/javascript" src="js/simulation.js"></script>
<script type="text/javascript" src="js/entities.js"></script>
<script type="text/javascript" src="js/utils.js"></script>
<script type="text/javascript" src="js/utils/paper-full.js"></script>
<script type="text/javascript" src="js/utils/jquery.min.js"></script>
<script type="text/javascript" src="js/utils/bootstrap.min.js"></script>
<!-- <script type="text/javascript" src="js/utils/jquery-ui.min.js"></script> -->
<script type="text/javascript" src="js/utils/jquery.mousewheel.min.js"></script>
<script type="text/javascript">
	window.onerror = function(msg, url, line, col, error) {
		// Note that col & error are new to the HTML 5 spec and may not be 
		// supported in every browser.  It worked for me in Chrome.
		var extra = !col ? '' : '\ncolumn: ' + col;
		extra += !error ? '' : '\nerror: ' + error;

		// You can view the information in an alert to see things working like this:
		console.log("Error: " + msg + "\nurl: " + url + "\nline: " + line + extra);
		alert("Error: " + msg + "\nurl: " + url + "\nline: " + line + extra);

		// TODO: Report this error via ajax so you can keep track
		//       of what pages have JS issues

		var suppressErrorAlert = true;
		// If you return true, then error alerts (like in older versions of 
		// Internet Explorer) will be suppressed.
		return suppressErrorAlert;
	};

	enableSimulation = true;
	myMap = new Map();
	entities = new EntitiesRegistry();
	entStyle = new EntitiesStyle();

	sim = null;

	setupSimulation();

	//myMap.onStartLoading(openLoadingDialog);
	myMap.onFinishDrawing(closeLoadingDialog);
	//myMap.setProgressNotifier(setProgressText);
	//myMap.onMapReady(carTest);

	mapLayer = null;

	paper.install(window);

	var style = new MapStyle();
	//style.debug = true;

	var dDialog = null;
	var ws1;
	var ws2;
	var server = window.location.host;

	function setupSimulation() {
		sim = new Simulation(myMap, entities, 4, 1000);
		sim.onReady(startSimulation);
		sim.onStateReceived(function(nInCache){
			$('#statesCount').html(nInCache);
		});
		sim.emptyStateCacheCallback = function() {
			$('#loadingMessage').html(
					"Cache degli stati vuota.<br />Buffering in corso...");
			$('#loadingDialog').modal('show');
		}

		sim.statesAvailableCallback = function() {
			$('#loadingDialog').modal('hide');
		}
	}

	function startSimulation() {
		console.log("start simulation");
		sim.init();
		if(enableSimulation){
			view.onFrame = function(event) {
				sim.updateState(event.delta * 1000);
			}
		}
	}


	window.onfocus = function()
	{
		if(sim != null){
			console.log("adding renderer");
			sim.fastForward();
			view.onFrame = function(event) {
				// use this trick to throw away the first delta that is usually huge
				view.onFrame = function(event){
					sim.updateState(event.delta * 1000);
				}
			}
		}
	}

	window.onblur = function()
	{
		console.log("removing renderer");
		view.onFrame = null;
	}

	function traslladar(a, b) {
		var center = paper.project.view.center;
		var desX = (a.x - b.x);
		var desY = (a.y - b.y);

		var newCenter = [ center.x + desX, center.y + desY ];
		return newCenter;
	}

	function zoomIn() {
		view.zoom = view.zoom * 1.1;
	}

	function zoomOut() {
		view.zoom = view.zoom / 1.1;
	}

	function switchTrafficLights() {
		myMap.switchTrafficLights();
	}

	function selectText(containerid) {

		var node = document.getElementById(containerid);

		if (document.selection) {
			var range = document.body.createTextRange();
			range.moveToElementText(node);
			range.select();
		} else if (window.getSelection) {
			var range = document.createRange();
			range.selectNodeContents(node);
			window.getSelection().removeAllRanges();
			window.getSelection().addRange(range);
		}
	}

	function openLoadingDialog() {
		console.log("openLoadingDialog fired");
		$('#loadingMessage').html(
				"Please wait!<br />Loading and drawing the map");
		$('#loadingDialog').modal('show');
		//$('#outputData').text("Started loading and drawing");
	}

	function closeLoadingDialog() {
		$('#loadingDialog').modal('hide');

		if(enableSimulation){
			getUpdates();
		}
		//$('#loadingDialog .progress-label').text("");
		//$('#loadingDialog').dialog('destroy');
	}

	function getUpdates() {
		var target = "ws://" + server
				+ "/quartiere@_ID_QUARTIERE_@/updatesStream";
		console.log("Opening the websocket against " + target);
		ws1 = new WebSocket(target);

		ws1.onopen = function(event) {
			//ws1.send("ciao server");
			console.log(event);
		}
		ws1.onmessage = function(event) {
			//console.log(event);
			//console.log(event.data);
			//console.log(JSON.parse(event.data));
			sim.addState(JSON.parse(event.data));
		}

		ws1.onerror = function(event) {
			console.log(event);
		}
	}

	function setProgressText(text) {
		console.log("notified " + text);
		$('#loadingMessage').html(text);
	}

	function update(event) {
		// the number of times the frame event was fired:
		console.log(event.count);

		// The total amount of time passed since
		// the first frame event in seconds:
		console.log(event.time);

		// The time passed in seconds since the last frame event:
		console.log(event.delta);
	}
	/*
	function carTest(){
		entStyle.carShape.args.size = [3.5,5];
		var carOne = new Car();
		carOne.draw(entStyle);
		carOne.hide();
		var newPos = myMap.crossroads['i1'].getPositionAt(10, 34, curDistrict,'left');
		carOne.move(newPos.position, newPos.angle);
		carOne.show();

		var car2 = new Car();
		car2.draw(entStyle);
		car2.hide();
		var p1 = myMap.streets['1'].getPositionAt(150, true, 0);
		car2.move(p1.position, p1.angle);
		car2.show();

		var car3 = new Car();
		car3.draw(entStyle);
		car3.hide();
		var p2 = myMap.streets['1'].getPositionAt(150, false, 1);
		car3.move(p2.position, p2.angle);
		car3.show();
	}
	 */

	function resetSimulation() {
		console.log("resetting simulation");
		setupSimulation();
		//getUpdates();
	}

	onload = function(e) {

		entStyle.carShape.args.size = [ 3.5, 5 ];

		$('#loadingDialog').modal({
			backdrop : 'static',
			keyboard : false,
			show : false,
		});

		$('#dataDialog').modal({
			show : false,
		});

		paper.setup(document.getElementById("canvas"));
		//loadingDialog.dialog('open');
		$('#outputData').text("Started loading and drawing");
		$('#loadingDialog').modal('show');

		myMap.setStyle(style);
		entities.setStyle(entStyle);
		openLoadingDialog();

		setTimeout(function() {
			jQuery.getJSON("quartiere@_ID_QUARTIERE_@/map.json",
					function(data) {
						myMap.load(data);
						myMap.draw();
						entities.load(data);
						entities.draw(data);
					});
		}, 10);

		mapLayer = project.activeLayer;
		secondLayer = new Layer();
		view.draw();
		//view.onFrame = update;

		var myTool = new Tool();
		myTool.onMouseDown = function(event) {
			path = new Point();
			path.add(event.point);
			$("#canvas").css('cursor', '-webkit-grabbing');

		};

		myTool.onMouseDrag = function(event) {
			path.add(event.point);

			var des = traslladar(event.downPoint, event.point);
			paper.project.view.center = des;

		}

		myTool.onMouseUp = function(event) {
			$("#canvas").css('cursor', '-webkit-grab');
			$("#canvas").css('cursor', '-moz-grab');
		}

		$('#canvas').mousewheel(function(event) {
			event.deltaY > 0 ? zoomIn() : zoomOut();
		});

		$('#getData').on(
				'click',
				function() {
					//console.log(JSON.stringify(myMap.getUpdatedData(), null, 2));
					$('#jsonDataArea').text(
							JSON.stringify(myMap.getUpdatedData(), null, 2));
					$('#dataDialog').modal("show");
				});

		$('#action1').on('click', function() {
			craftStatesForCar(state, 1, route2, myMap, 10, 1000);
			console.log(state);
		});

		$('#action2').on('click', function() {

			myState = [];
			craftStatesForCar(myState, 1, route4, myMap, 10, 300);
			//craftStatesForCar(myState, 2, route3, myMap, 15, 1000);
			//simulation = new Simulation(myMap, myObjects, 4, 1000);
			console.log(myState);

			//var mText = JSON.stringify(myState, null, 0) + "\n";
			$('#jsonDataArea').text(JSON.stringify(myState, null, 0));
			$('#dataDialog').modal("show")
			/*
			for(var i in myState){
				mText += JSON.stringify(myState[i], null, 0) + "\n";
			}
			
			var mText = JSON.stringify(myState[0], null, 0) + "\n";
			$('#jsonDataArea').text(JSON.stringify(myState, null, 0));
			$('#dataDialog').modal("show");


			for(var i in myState){
				simulation.addState(myState[i]);
			}
			/*
			simulation.init();
			view.onFrame = function(event){
				simulation.updateState(event.delta*1000);
			}
			 */
		});

		$('#action3').on('click', function() {
			view.onFrame = null;
		});
	}
</script>

</head>
<body>

	<!--
	<p>
		<a id="openws" href="#" onClick="openSocket()">Open</a>
		<a id="closews" href="#" onClick="closeSocket()">Close</a>
	</p>-->

	<div id="canvas-wrap">


		<div class="modal fade" id="dataDialog" tabindex="-1" role="dialog"
			aria-labelledby="myDataDialogLabel" aria-hidden="true">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<button type="button" class="close" data-dismiss="modal">
							<span aria-hidden="true">&times;</span><span class="sr-only">Close</span>
						</button>
						<h4 class="modal-title" id="myDataDialogLabel">Json Data</h4>
					</div>
					<div class="modal-body">
						<pre id="jsonDataArea" style="overflow: auto; max-height: 500px;"></pre>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-primary"
							onClick="selectText('jsonDataArea')">Select all</button>
					</div>
				</div>
			</div>
		</div>

		<div class="modal" id="loadingDialog" tabindex="-1" role="dialog"
			aria-labelledby="myLoadingDialogLabel" aria-hidden="true">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h4 class="modal-title" id="myLoadingDialogLabel">Loading...</h4>
					</div>
					<div class="modal-body">
						<p id="loadingMessage"></p>
						<div class="progress">
							<div class="progress-bar progress-bar-striped active"
								role="progressbar" aria-valuenow="100" aria-valuemin="0"
								aria-valuemax="100" style="width: 100%">
								<span class="sr-only">Loading</span>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>

		<!--
		<div id="dialog" style="overflow:auto;">
			<p style="font-size:10pt;"></p>
		</div>
		<div id="loadingDialog" title="Loading map">
			<div class="progress-label">Starting loading...</div>
			<div id="progressbar"></div>
		</div>
		-->
		<form>
			<span id="debug"><a id="getData" href="#">Get data</a> - </span> <span
				id="debugq"><a id="action1" href="#">Generate states</a> - </span> <span><a
				id="action2" href="#">Create states</a> - </span> <span><a
				id="action3" href="#" onClick="resetSimulation()">Reset
					simulation</a> - </span> <span id="debugOutput"></span>
			<span style="float:right;">Cached states: <span id="statesCount"></span> </span>
		</div>
		</form>
		<canvas id="canvas" resize hidpi="off"
			style="background-color: #F0EDE5;"></canvas>
		<div id="zoom-controls-div">
			<p>
				<a id="zoomInBtn" href="#" onClick="zoomIn()">+</a> <a
					id="zoomOutBtn" href="#" onClick="zoomOut()">-</a>
			</p>
			<p>
				<a onClick="switchTrafficLights()">Switch</a>
			</p>
		</div>
	</div>
</body>
</html>
