<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<title>Mappa quartiere @_ID_QUARTIERE_@</title>
<link rel="stylesheet" href="css/style.css">
<link rel="stylesheet" href="css/bootstrap.min.css">
<link rel="stylesheet" href="css/bootstrap-theme.min.css">

<script type="text/javascript" src="js/map.js"></script>
<script type="text/javascript" src="js/simulation.js"></script>
<script type="text/javascript" src="js/entities.js"></script>
<script type="text/javascript" src="js/utils.js"></script>
<script type="text/javascript" src="js/traiettorie.js"></script>
	<script type="text/javascript" src="js/utils/JSChain.js"></script>
<script type="text/javascript" src="js/utils/paper-full.js"></script>
<script type="text/javascript" src="js/utils/jquery.min.js"></script>
<script type="text/javascript" src="js/utils/bootstrap.min.js"></script>
<script type="text/javascript" src="js/utils/jquery.mousewheel.min.js"></script>
<script type="text/javascript">
	window.onerror = function(msg, url, line, col, error) {
		// Note that col & error are new to the HTML 5 spec and may not be 
		// supported in every browser.  It worked for me in Chrome.
		var extra = !col ? '' : '\ncolumn: ' + col;
		extra += !error ? '' : '\nerror: ' + error;

		// You can view the information in an alert to see things working like this:
		console.log("Error: " + msg + "\nurl: " + url + "\nline: " + line + extra);
		alert("Error: " + msg + "\nurl: " + url + "\nline: " + line + extra);
		console.log(error);
		console.log(error.stack);

		// TODO: Report this error via ajax so you can keep track
		//       of what pages have JS issues

		var suppressErrorAlert = true;
		// If you return true, then error alerts (like in older versions of 
		// Internet Explorer) will be suppressed.
		return suppressErrorAlert;
	};

	var enableSimulation = true;
	var myMap = new Map();
	var entities = new EntitiesRegistry();
	var entStyle = new EntitiesStyle();
	var oggettoCaricamento = "Caricamento";
	var caricato = false;

	var sim = null;

	setupSimulation();

	var bufferSize = 20;


	myMap.onFinishLoading = function(){myMap.asyncDraw();};
	myMap.onFinishDrawing = function() {
		myMap.bringTrafficLightsToFront();
		mapLayer = project.activeLayer;
		view.draw();
		fitMap();
		closeLoadingDialog();
		entities.draw();
		entities.hide();
		console.log("done with the drawing");
		if(enableSimulation){
				getUpdates();
			}
	};

	myMap.setProgressNotifier(setProgressText);

	// callbacks for the counters

	entities.onCarsChange = function(cars){
		$('#car-num').text(Object.keys(cars).length);
	}

	entities.onBusesChange = function(buses){
		$('#buses-num').text(Object.keys(buses).length);
	}

	entities.onBikesChange = function(bikes){
		$('#bike-num').text(Object.keys(bikes).length);
	}

	entities.onPedestriansChange = function(ped){
		$('#ped-num').text(Object.keys(ped).length);
	}

	mapLayer = null;

	paper.install(window);

	var style = new MapStyle();

	var dDialog = null;
	var ws1;
	var ws2;
	var server = window.location.host;

	function setupSimulation() {
		sim = new Simulation(myMap, entities, bufferSize, 1000);
		sim.setTraiettorie(traiettorie);
		sim.onReady = startSimulation;
		sim.onStateReceived = function(nInCache){
			var perc = (nInCache / bufferSize);
			perc = perc > 1.0 ? 1.0 : perc;

			$('#rendering-cache-bar').html(nInCache);
			$('#rendering-cache-bar').css('width', (perc*100)+'%').attr('aria-valuenow', (perc*100)); 

			var barStyle = "progress-bar-default";
			if(perc < 0.33){
				barStyle = "progress-bar-danger";
			} else if (perc < 1){
				barStyle = "progress-bar-warning";
			}
			$('#rendering-cache-bar').attr("class", "progress-bar active "+barStyle); 
		};

		sim.onEmptyCache = setBufferingState;

		sim.onStatesAvailable = setRunningState;

		sim.onObjectMoved = objectMovedCallback;
	}

	function setBufferingState(){
		$('#rendering-state-bar').attr("class", "progress-bar progress-bar-striped active"); 
		$('#rendering-state-bar').html('<i id="rendering-state-icon" class="glyphicon glyphicon-refresh"> </i> Buffering');
	}

	function setRunningState(){
		$('#rendering-state-bar').attr("class", "progress-bar progress-bar-success active"); 
		$('#rendering-state-bar').html('<i id="rendering-state-icon" class="glyphicon glyphicon-play"> </i> Running');
	}

	function setStoppedState(){
		$('#rendering-state-bar').attr("class", "progress-bar progress-bar-danger"); 
		$('#rendering-state-bar').html('<i id="rendering-state-icon" class="glyphicon glyphicon-stop"> </i> Fermo');
	}

	function startSimulation() {
		console.log("start simulation");
		sim.init();
		entities.show();
		myMap.bringTrafficLightsToFront();
		if(enableSimulation){
			view.onFrame = function(event) {
				sim.updateState(event.delta * 1000);
			}
		}
	}

	function objectMovedCallback(object, state, distance, position)
	{
		var tipo = state.mezzo == "walking" ? "ped" : state.mezzo;
		var id = state.id_quartiere_abitante+"_"+state.id_abitante;

		var row = $('#'+tipo+'Table tr#'+id);
		if (!row.length) {
 			row = $('#'+tipo+'Table tbody').append('<tr id="'+id+'"><td class="id">'+state.id_abitante+'</td><td class="quart">'+state.id_quartiere_abitante+'</td><td class="where"></td><td class="pos"></td></tr>');
 		}

 		row.find('td.where').text(state.where+ " ("+state.id_where+")");
 		row.find('td.pos').text(distance);
	}

	window.onfocus = function()
	{
		if(sim != null && sim.running){
			console.log("adding renderer");
			sim.fastForward();
			view.onFrame = function(event) {
				// use this trick to throw away the first delta that is usually huge
				view.onFrame = function(event){
					sim.updateState(event.delta * 1000);
				}
			}
		}
	}

	window.onblur = function()
	{
		console.log("removing renderer");
		view.onFrame = null;
	}

	function traslladar(a, b) {
		var center = paper.project.view.center;
		var desX = (a.x - b.x);
		var desY = (a.y - b.y);

		var newCenter = [ center.x + desX, center.y + desY ];
		return newCenter;
	}

	function zoomIn() {
		view.zoom = view.zoom * 1.1;
	}

	function zoomOut() {
		view.zoom = view.zoom / 1.1;
	}

  function fitMap(){
    if(project.activeLayer.children.length > 0){
      var g = project.activeLayer;
      var xP = view.size.width / g.bounds.width;
      var yP = view.size.height / g.bounds.height;
      var z = xP;
      if(Math.abs(yP) < Math.abs(xP))
        z = yP;
      view.zoom = view.zoom * z;
      view.center = project.activeLayer.position;
    }
  }

	function switchTrafficLights() {
		myMap.switchTrafficLights();
	}

	function selectText(containerid) {

		var node = document.getElementById(containerid);

		if (document.selection) {
			var range = document.body.createTextRange();
			range.moveToElementText(node);
			range.select();
		} else if (window.getSelection) {
			var range = document.createRange();
			range.selectNodeContents(node);
			window.getSelection().removeAllRanges();
			window.getSelection().addRange(range);
		}
	}

	function openLoadingDialog() {
		console.log("openLoadingDialog fired");
		$('#loadingMessage').html(
				"Prego attendere!<br />Caricamento e rendering della mappa in corso");
		$('#loadingDialog').modal('show');
		//$('#outputData').text("Started loading and drawing");
	}

	function closeLoadingDialog() {
		$('#loadingDialog').modal('hide');
	}

	function openMessageDialog(text) {
		$('#messageDialogText').html(text);
		$('#messageDialog').modal('show');
	}

	function closeMessageDialog() {
		$('#messageDialog').modal('hide');
	}



	function getUpdates() {
		var target = "ws://" + server
				+ "/quartiere@_ID_QUARTIERE_@/updatesStream";
		console.log("Opening the websocket against " + target);
		ws1 = new WebSocket(target);

		ws1.onopen = function(event) {
			//ws1.send("ciao server");
			console.log(event);
			setBufferingState();
		}
		ws1.onmessage = function(event) {
			//console.log(event);
			//console.log(event.data);
			//console.log(JSON.parse(event.data));
			var msg = JSON.parse(event.data);
			if(msg.type)
			{
				if(msg.type == "update")
				{
					sim.addState(msg);
				} 
				else if (msg.type == "command")
				{
					console.log(msg);
					if(msg.command == "terminated")
					{
						ws1.close();
						sim.stop();
						view.onFrame = null;
						closeLoadingDialog();
						openMessageDialog("Simulazione terminata.<br />Ora Ã¨ possibile chiudere il browser.");
						setStoppedState();
					}
					if(msg.command == "termination_requested")
					{
						openLoadingDialog();
						$('#loadingMessage').html(
								"Terminazione richiesta.<br />In attesa del segnale di terminazione da parte del sistema.");
					}	
				}
			}
		}

		ws1.onerror = function(event) {
			console.log(event);
		}
	}

	function requestTermination()
	{
		console.log("request Termination");
		sim.stop();
		view.onFrame = null;
		if(ws1)
		{
			var data = {type:"command", command:"terminate"};
			var text = JSON.stringify(data);
			ws1.send(text);
		}
	}

	function setProgressText(text) {
		console.log("notified " + text);
		$('#loadingMessage').html(text);
	}



		function setProgressText(text, value) {
			var msg = "";
			var perc = value;
			if(caricato)
				perc = perc + 50;
			if(value != 100)
			{
				msg = oggettoCaricamento+" "+text;
			} else {
				msg = text;
				caricato = true;
				oggettoCaricamento = "Disegno";
			}
			$('#loadingMessage').html(msg);
			$('#loadingDialog .progress-bar').css('width', perc+'%').attr('aria-valuenow', perc); 
		}

	function resetSimulation() {
		console.log("resetting simulation");
		setupSimulation();
		//getUpdates();
	}

	onload = function(e) {

		//entStyle.carShape.args.size = [ 3.5, 5 ];

		$('#loadingDialog').modal({
			backdrop : 'static',
			keyboard : false,
			show : false,
		});

		$('#dataDialog').modal({
			show : false,
		});

		setStoppedState();
		$(function () {
			$('[data-toggle="tooltip"]').tooltip()
		})

		paper.setup(document.getElementById("canvas"));
		//loadingDialog.dialog('open');
		$('#outputData').text("Iniziato caricamento e rendering...");
		$('#loadingDialog').modal('show');

		myMap.setStyle(style);
		entities.setStyle(entStyle);
		openLoadingDialog();

		setTimeout(function() {
			jQuery.getJSON("quartiere@_ID_QUARTIERE_@/map.json",
					function(data) {
						myMap.asyncLoad(data);
					});
		}, 10);

		var myTool = new Tool();
		myTool.onMouseDown = function(event) {
			path = new Point();
			path.add(event.point);
			$("#canvas").css('cursor', '-webkit-grabbing');

		};

		myTool.onMouseDrag = function(event) {
			path.add(event.point);

			var des = traslladar(event.downPoint, event.point);
			paper.project.view.center = des;

		}

		myTool.onMouseUp = function(event) {
			$("#canvas").css('cursor', '-webkit-grab');
			$("#canvas").css('cursor', '-moz-grab');
		}

		$('#canvas').mousewheel(function(event) {
			event.deltaY > 0 ? zoomIn() : zoomOut();
		});

		
	}
</script>

</head>
<body>

	<div id="canvas-wrap">


		<div class="modal fade" id="dataDialog" tabindex="-1" role="dialog"	aria-labelledby="myDataDialogLabel" aria-hidden="true">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<button type="button" class="close" data-dismiss="modal">
							<span aria-hidden="true">&times;</span><span class="sr-only">Close</span>
						</button>
						<h4 class="modal-title" id="myDataDialogLabel">Json Data</h4>
					</div>
					<div class="modal-body">
						<pre id="jsonDataArea" style="overflow: auto; max-height: 500px;"></pre>
					</div>
					<div class="modal-footer">
						<button type="button" class="btn btn-primary"
						onClick="selectText('jsonDataArea')">Select all</button>
					</div>
				</div>
			</div>
		</div>

		<div class="modal" id="loadingDialog" tabindex="-1" role="dialog" aria-labelledby="myLoadingDialogLabel" aria-hidden="true">
			<div class="modal-dialog">
				<div class="modal-content">
					<div class="modal-header">
						<h4 class="modal-title" id="myLoadingDialogLabel">Caricamento in corso...</h4>
					</div>
					<div class="modal-body">
						<p id="loadingMessage"></p>
						<div class="progress">
							<div class="progress-bar progress-bar-striped active"
							role="progressbar" aria-valuenow="0" aria-valuemin="0"
							aria-valuemax="100" style="width: 0%">
							<span class="sr-only">Caricamento</span>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>

	<div class="modal" id="messageDialog" tabindex="-1" role="dialog" aria-labelledby="myMessageDialogLabel" aria-hidden="true">
		<div class="modal-dialog">
			<div class="modal-content">
				<div class="modal-header">
					<h4 class="modal-title" id="myMessageDialogLabel">Info</h4>
				</div>
				<div class="modal-body">
					<p id="messageDialogText"></p>
				</div>
			</div>
		</div>
	</div>


	<canvas id="canvas" resize hidpi="off"
	style="background-color: #F0EDE5;"></canvas>

	<div id="title-div">
		<h1>Simulazione quartiere @_ID_QUARTIERE_@</h1>
	</div>

	<div id="controls-div">
		<div class="btn-group-vertical" role="group" aria-label="...">
			<button type="button" class="btn btn-default glyphicon glyphicon-zoom-in" onClick="zoomIn()"  data-toggle="tooltip" data-placement="right" title="Zoom Im"></button>
			<button type="button" class="btn btn-default glyphicon glyphicon-zoom-out" onClick="zoomOut()"  data-toggle="tooltip" data-placement="right" title="Zoom out"></button>
		</div>
		<div class="divisor-small"></div>
		<button id="fitMapButton" type="button" class="btn btn-default glyphicon glyphicon-fullscreen" data-toggle="tooltip" data-placement="right" title="Centra e ridimensiona" onClick="fitMap()"></button>
		<div class="divisor"></div>
		<button type="button" class="btn btn-primary glyphicon glyphicon-home" onClick="window.open('/', '_self');"  data-toggle="tooltip" data-placement="right" title="Torna alla mappa della cittÃ "></button>
		<div class="divisor"></div>
		<div>
			<button type="button" class="btn btn-danger glyphicon glyphicon-stop" onClick="requestTermination()"  data-toggle="tooltip" data-placement="right" title="Richiedi terminazione"></button>
		</div>
	</div>



	<div id="info-box">
		<p id="info-title" class="box-title"><strong>Infos</strong></p>
		<div class="propsBlock-run">
			<div class="labels">
				<p>Macchine:</p>
				<p>Autobus:</p>
				<p>Bici:</p>
				<p>Pedoni:</p>
			</div>
			<div class="values">
				<p id="car-num">0</p>
				<p id="buses-num">0</p>
				<p id="bike-num">0</p>
				<p id="ped-num">0</p>
			</div>
		</div>
	</div>

	<div id="rendering-state-box">
		<p id="status-title" class="box-title"><strong>Rendering</strong></p>
		<div class="renderingState">
			<p style="text-align:center; margin-bottom:5px;">Stato</p>
			<div class="progress">
				<div id="rendering-state-bar" class="progress-bar progress-bar-danger" role="progressbar" aria-valuenow="100" aria-valuemin="0"	aria-valuemax="100" style="width: 100%">
					<i id="rendering-state-icon" class="glyphicon glyphicon-stop"> </i> Fermo
				</div>
			</div>
			<p style="text-align:center; margin-bottom:5px;">Cache</p>
			<div class="progress">
				<div id="rendering-cache-bar" class="progress-bar progress-bar-danger" role="progressbar" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100" style="width: 10%; min-width:10%;">
					0
				</div>
			</div>
		</div>
	</div>

</div>
</body>
</html>
